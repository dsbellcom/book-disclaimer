<?php

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Cookie;
use \Drupal\Core\Url;

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Add a disclaimer to a 'book' node.
 */
function book_disclaimer_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Disclaimer is shown only when node of type 'book' is shown as full view.
  if ('book' === $entity->getType() && 'full' === $view_mode) {
    if (is_null($entity->get('field_disclaimer')->first())) {
      // This book has no disclaimer. Nothing to do.
      return;
    }
    $accepted_disclaimers_arr = [];
    if (isset($_COOKIE['accepted_disclaimers'])) {
      $accepted_disclaimers_arr = json_decode($_COOKIE['accepted_disclaimers']);
    }

    if (!in_array($entity->id(), $accepted_disclaimers_arr)) {
      // This book disclaimer has not been accepted yet. Need to show disclaimer instead of book.
      $disclaimer_id = $entity->get('field_disclaimer')->first()->getValue()['target_id'];
      $disclaimer = \Drupal::entityTypeManager()->getStorage('node')->load($disclaimer_id);

      $reject_url = Url::fromRoute('view.bookpage.books')->toString();
      $accepted_disclaimers_arr[] = $entity->id();
      $attached = ['library' => ['book_disclaimer/book-disclaimer']];

      // Show disclaimer instead of book.
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $node_view = $view_builder->view($disclaimer, 'full');
      $node_view['#theme'] = 'book-disclaimer';
      $node_view['#reject_url'] = $reject_url;
      $node_view['#entity_type'] = 'node';
      $node_view['#accepted_disclaimers'] = json_encode($accepted_disclaimers_arr);
      $node_view['#attached'] = $attached;
      render($node_view);

      $build = $node_view;
    }
  }
}

/**
 * Implements hook_theme().
 */
function book_disclaimer_theme() {
  return ['book-disclaimer' => ['render element' => 'content']];
}
